<?php

/**
 * @file
 */

use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Render\BubbleableMetadata;

/**
 *
 */
function iq_multidomain_extensions_install() {
  module_set_weight('iq_multidomain_extensions', 999);
}

/**
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function iq_multidomain_extensions_entity_type_alter(&$entity_types) {
  if (isset($entity_types['domain'])) {
    $entity_types['domain']->setHandlerClass(
      'form',
      [
        'default' => 'Drupal\iq_multidomain_extensions\DomainForm',
        'edit' => 'Drupal\iq_multidomain_extensions\DomainForm',
        'delete' => 'Drupal\domain\Form\DomainDeleteForm',
      ]
    );
  }
}

/**
 * Implements hook_token_info().
 */
function iq_multidomain_extensions_token_info() {
  $type = ['name' => t('iqual domain extension'), 'description' => t('iqual domain extension tokens')];
  $tokens['url_prefix'] = ['name' => t("Domain URL prefix"), 'description' => t("Get the domain prefix.")];
  return [
    'types' => ['iq_domain' => $type],
    'tokens' => ['iq_domain' => $tokens],
  ];
}

/**
 * Implements hook_tokens().
 */
function iq_multidomain_extensions_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {

  $replacements = [];
  if ($type == 'iq_domain' && !empty($data['node']) && $data['node']->field_domain_source->entity) {

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'url_prefix':
          $replacements[$original] = $data['node']->field_domain_source->entity->getThirdPartySetting('iq_multidomain_extensions', 'url_prefix', '');
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Preprocess hook.
 *
 * @param array $variables
 *   Theme variables.
 */
function iq_multidomain_extensions_preprocess_pattern_views_row(array &$variables) {
  /** @var \Drupal\views\ResultRow $row */
  /** @var \Drupal\views\ViewExecutable $view */
  /** @var \Drupal\ui_patterns_views\Plugin\views\row\Pattern $row_plugin */

  $fields = [];
  $view = $variables['view'];
  $row_plugin = $view->rowPlugin;
  $options = $variables['options'];
  $row = $variables['row'];

  $pattern_prefix = FALSE;

  if (\Drupal::service('theme.manager')->getActiveTheme()->getName() != \Drupal::config('system.theme')->get('default')) {
    $pattern_prefix = \Drupal::service('theme.manager')->getActiveTheme()->getName() . '_';
    $pattern_ids = array_keys(\Drupal::service('plugin.manager.ui_patterns')->getDefinitions());
  }

  foreach ($options['pattern_mapping'] as $mapping) {
    $field_name = $mapping['source'];
    $field = $view->field[$field_name];
    $field_output = $view->style_plugin->getField($row->index, $field_name);
    if ($row_plugin->isFieldVisible($field, $field_output)) {
      $destination = $row_plugin->getMappingDestination('views_row', $field_name, $options);
      $fields[$destination][] = $field_output;
    }
  }

  $variables['pattern'] = [];
  if (empty($view->live_preview) && !empty($fields)) {
    if ($pattern_prefix && in_array($pattern_prefix . $options['pattern'], $pattern_ids)) {
      $pattern_id = $pattern_prefix . $options['pattern'];
    }
    else {
      $pattern_id = $options['pattern'];
    }

    $variables['pattern'] = [
      '#type' => 'pattern',
      '#id' => $pattern_id,
      '#fields' => $fields,
      '#multiple_sources' => TRUE,
      '#variant' => isset($options['pattern_variant']) ? $options['pattern_variant'] : '',
    ];

    // Allow default context values to not override those exposed elsewhere.
    $variables['pattern']['#context']['type'] = 'views_row';
    $variables['pattern']['#context']['view_name'] = $view->storage->id();
    $variables['pattern']['#context']['display'] = $view->current_display;
    $variables['pattern']['#context']['view'] = $view;
    $variables['pattern']['#context']['row'] = $row;
  }
}

/**
 * Implements hook_mail().
 */
function iq_multidomain_extensions_mail($key, &$message, $params) {
  $messenger = \Drupal::messenger();
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    case 'q_multidomain_extensions_create_domain':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Domain created: @title', ['@title' => $params['domain_title']], $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 *
 */
function iq_multidomain_extensions_views_plugins_row_alter(array &$plugins) {

  // Change the used class of a plugin.
  $plugins['ui_patterns']['class'] = 'Drupal\\iq_multidomain_extensions\\Plugin\\views\\row\\Pattern';
}
