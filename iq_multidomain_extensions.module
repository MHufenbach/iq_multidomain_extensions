<?php

/**
 * @file
 * Iq_multidomain_extensions module file.
 */

use Drupal\Core\Render\BubbleableMetadata;
use Drupal\domain\Form\DomainDeleteForm;
use Drupal\iq_multidomain_extensions\DomainForm;

/**
 * Implements hook_entity_type_alter().
 */
function iq_multidomain_extensions_entity_type_alter(&$entity_types) {
  if (isset($entity_types['domain'])) {
    $entity_types['domain']->setHandlerClass(
      'form',
      [
        'default' => DomainForm::class,
        'edit' => DomainForm::class,
        'delete' => DomainDeleteForm::class,
      ]
    );
  }
}

/**
 * Implements hook_token_info().
 */
function iq_multidomain_extensions_token_info() {
  $tokens = [];
  $type = [
    'name' => t('iqual domain extension'),
    'description' => t('iqual domain extension tokens'),
  ];
  $tokens['url_prefix'] = [
    'name' => t("Domain URL prefix"),
    'description' => t("Get the domain prefix."),
  ];
  return [
    'types' => ['iq_domain' => $type],
    'tokens' => ['iq_domain' => $tokens],
  ];
}

/**
 * Implements hook_tokens().
 */
function iq_multidomain_extensions_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {

  $replacements = [];
  if ($type == 'iq_domain' && !empty($data['node']) && $data['node']->field_domain_source->entity) {

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'url_prefix':
          $replacements[$original] = $data['node']->field_domain_source->entity->getThirdPartySetting('iq_multidomain_extensions', 'url_prefix', '');
          break;
      }
    }
  }
  return $replacements;
}
