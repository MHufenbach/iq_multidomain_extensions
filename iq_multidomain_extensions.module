<?php


use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Extension\Exception\UnknownExtensionException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use \Symfony\Component\HttpFoundation\RedirectResponse;
use \Drupal\Core\Form\FormState;

function iq_multidomain_extensions_install() {
  module_set_weight('iq_multidomain_extensions', 999);
}

/**
 * @param EntityTypeInterface[] $entity_types
 */
function iq_multidomain_extensions_entity_type_alter(&$entity_types)
{
  if (isset($entity_types['domain'])) {
    $entity_types['domain']->setHandlerClass(
      'form',
      [
        'default' => 'Drupal\iq_multidomain_extensions\DomainForm',
        'edit' => 'Drupal\iq_multidomain_extensions\DomainForm',
        'delete' => 'Drupal\domain\Form\DomainDeleteForm'
      ]
    );
  }
}

/**
 * Implements hook_token_info().
 */
function iq_multidomain_extensions_token_info()
{
  $info = [];
  $info['types']['iq_domain'] = ['name' => t('iqual Domain Extensions'), 'description' => t('iqual Domain Extensions')];
  $info['tokens']['iq_domain']['url_prefix'][] = 'iqual Domain URL prefix';
  return $info;
}

/**
 * Implements hook_tokens().
 */
function  iq_multidomain_extensions_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata)
{

  $replacements = [];
  if ($type == 'iq_domain' && !empty($data['node']) && $data['node']->field_domain_source->entity ) {

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'url_prefix':
          $replacements[$original] = $data['node']->field_domain_source->entity->getThirdPartySetting('iq_multidomain_extensions', 'url_prefix', '');
          break;
      }
    }
  }
  return $replacements;
}


/**
 * Preprocess hook.
 *
 * @param array $variables
 *   Theme variables.
 */
function iq_multidomain_extensions_preprocess_pattern_views_row(array &$variables)
{
  /** @var \Drupal\views\ResultRow $row */
  /** @var \Drupal\views\ViewExecutable $view */
  /** @var \Drupal\ui_patterns_views\Plugin\views\row\Pattern $row_plugin */

  $fields = [];
  $view = $variables['view'];
  $row_plugin = $view->rowPlugin;
  $options = $variables['options'];
  $row = $variables['row'];

  $pattern_prefix = false;

  if (\Drupal::service('theme.manager')->getActiveTheme()->getName() != \Drupal::config('system.theme')->get('default')) {
    $pattern_prefix = \Drupal::service('theme.manager')->getActiveTheme()->getName() . '_';
    $pattern_ids = array_keys(\Drupal::service('plugin.manager.ui_patterns')->getDefinitions());
  }

  foreach ($options['pattern_mapping'] as $mapping) {
    $field_name = $mapping['source'];
    $field = $view->field[$field_name];
    $field_output = $view->style_plugin->getField($row->index, $field_name);
    if ($row_plugin->isFieldVisible($field, $field_output)) {
      $destination = $row_plugin->getMappingDestination('views_row', $field_name, $options);
      $fields[$destination][] = $field_output;
    }
  }

  $variables['pattern'] = [];
  if ($view->preview && !isset($view->element['#embed'])) {
    drupal_set_message(t("Pattern Views row plugin does not support preview."), 'warning');
    $variables['pattern'] = ['#type' => 'status_messages'];
  } elseif (!empty($fields)) {

    if ($pattern_prefix && in_array($pattern_prefix . $options['pattern'], $pattern_ids)) {
      $pattern_id = $pattern_prefix . $options['pattern'];
    } else {
      $pattern_id = $options['pattern'];
    }

    $variables['pattern'] = [
      '#type' => 'pattern',
      '#id' => $pattern_id,
      '#fields' => $fields,
      '#multiple_sources' => TRUE,
      '#variant' => isset($options['pattern_variant']) ? $options['pattern_variant'] : '',
    ];

    // Allow default context values to not override those exposed elsewhere.
    $variables['pattern']['#context']['type'] = 'views_row';
    $variables['pattern']['#context']['view_name'] = $view->storage->id();
    $variables['pattern']['#context']['display'] = $view->current_display;
    $variables['pattern']['#context']['view'] = $view;
    $variables['pattern']['#context']['row'] = $row;
  }
}



function iq_multidomain_extensions_pagedesigner_libraries_alter(&$libraries)
{
  $patternManager = \Drupal::service('plugin.manager.ui_patterns');
  foreach ($patternManager->getDefinitions() as $id => $definition) {
      $pattern_definition = $definition->toArray();
      if ( $pattern_definition['provider'] == \Drupal::service('theme.manager')->getActiveTheme()->getName() ) {
          foreach ($definition->getLibrariesNames() as $library) {
              if (strpos($library, 'pagedesigner') !== false) {
                  $libraries[] = $library;
              }
          }
      }
  }
}

function iq_multidomain_extensions_pagedesigner_libraries_internal_alter(&$libraries)
{
  $patternManager = \Drupal::service('plugin.manager.ui_patterns');
  foreach ($patternManager->getDefinitions() as $id => $definition) {
      $pattern_definition = $definition->toArray();
      if ( $pattern_definition['provider'] == \Drupal::service('theme.manager')->getActiveTheme()->getName() ) {
          foreach ($definition->getLibrariesNames() as $library) {
              if (strpos($library, 'internal') !== false) {
                  $libraries[] = $library;
              }
          }
      }
  }
}

function iq_multidomain_extensions_pagedesigner_libraries_live_alter(&$libraries)
{
  $patternManager = \Drupal::service('plugin.manager.ui_patterns');
  foreach ($patternManager->getDefinitions() as $id => $definition) {

      $pattern_definition = $definition->toArray();
      if ( $pattern_definition['provider'] == \Drupal::service('theme.manager')->getActiveTheme()->getName() ) {
          foreach ($definition->getLibrariesNames() as $library) {
              if (strpos($library, 'live') !== false) {
                  $libraries[] = $library;
              }
          }
      }
  }
}

function iq_multidomain_extensions_pagedesigner_patterns_alter(&$patterns, $type)
{
  $patternManager = \Drupal::service('plugin.manager.ui_patterns');
  foreach ($patternManager->getDefinitions() as $id => $definition) {
      $pattern_definition = $definition->toArray();
      if ( $pattern_definition['provider'] == \Drupal::service('theme.manager')->getActiveTheme()->getName() ) {
          if (strpos($definition->getBasePath(), $type) !== false && strpos($definition->getBasePath(), 'designer') === false) {
              $patternMarkup = _iq_multidomain_extensions_createIqualPattern($definition, $type);
              $patterns[$id] = array('id' => $id, 'pattern' => $patternMarkup, 'label' => $definition->getLabel(), 'definition' => $definition->toArray());
          }
      }
  }

}
function iq_multidomain_extensions_pagedesigner_patterns_designer_alter(&$patterns, $type)
{
$patternManager = \Drupal::service('plugin.manager.ui_patterns');
  foreach ($patternManager->getDefinitions() as $id => $definition) {
      $pattern_definition = $definition->toArray();
      if ( $pattern_definition['provider'] == \Drupal::service('theme.manager')->getActiveTheme()->getName() ) {
          if (strpos($definition->getBasePath(), $type) !== false && strpos($definition->getBasePath(), 'designer') !== false) {
              $patternMarkup = _iq_multidomain_extensions_createIqualPattern($definition, $type);
              $patterns[$id] = array('id' => $id, 'pattern' => $patternMarkup, 'label' => $definition->getLabel(), 'definition' => $definition->toArray());
          }
      }
  }
}

/**
* Build patterns using UI Pattern API's
*
* @param string $definition
* @return array
*/
function _iq_multidomain_extensions_createIqualPattern($definition, $type)
{
  $patternMarkup = '';
  $id = $definition['id'];
  $label = $definition['label'];
  $elements[$id] = [
      '#type' => 'pattern_preview',
      '#id' => $id,
  ];
  /* Render a pattern preview as displayed on the pagebuilder page */
  $preview = \Drupal::service('renderer')->render($elements);
  /* Get fields */
  $renderedFields = $definition->getFields();
  $info[$id] = [
      '#type' => 'pattern',
      '#id' => $id,
      '#fields' => [],
  ];
  foreach ($renderedFields as $key => $value) {
      $placeholderName = $value->getName();
      $placeholderType = $value->getType();
      $info[$id]['#fields'][$placeholderName] = '{{' . $placeholderName . '}}';
  }
  /* Render a pattern as displayed on the pagebuilder page */
  $pattern = \Drupal::service('renderer')->render($info);
  /* Append html with rendered patterns */
  if ($type == 'structural') {
      $patterntype = $id;
      if (strpos($patterntype, 'row') !== false) {
          $patterntype = 'row';
      }
      $patternMarkup = '<div class="iqbm-row" data-pattern-type="' . $patterntype . '">';
  } else {
      $patternMarkup = '<div class="iqbm-element" data-pattern-type="' . $id . '">';
  }
  $patternMarkup .= '<span class="iqbm-icon iqbm-drag"><i class="fa fa-arrows"></i></span>
                       <div class="iqbm-preview"><div class="iqbm-description"><div>' . $label . '</div></div>';
  $patternMarkup .= '<div class="iqbm-element-preview"><div class="iqbm-button iqbm-text"><a href="#">
      ' . $preview . '</a></div></div></div>';
  $patternMarkup .= '<div class="iqbm-view">' . $pattern . '</div></div>';
  return $patternMarkup;
}

/**
 * Implements hook_form_BASE_ID_alter().
 */
function iq_multidomain_extensions_form_domain_edit_form_alter(&$form, FormState $form_state, $form_id) {
    $user = \Drupal::currentUser();
    if (!$user->hasPermission('add iq_multidomain_extensions domains')) {
        $form['id']['#type'] = 'hidden';
        $form['scheme']['#type'] = 'hidden';
        $form['status']['#type'] = 'hidden';
        $form['is_default']['#type'] = 'hidden';
        $form['validate_url']['#type'] = 'hidden';
        $form['weight']['#type'] = 'hidden';
        $form['scheme']['#default_value'] = 'https';
        $form['status']['#default_value'] = 1;
        $form['is_default']['#default_value'] = false;
        $form['validate_url']['#default_value'] = false;
    }
    $form['actions']['submit']['#submit'][] = 'iq_multidomain_extensions_domain_edit_form_submit';
}

/**
 * Submit handler function for the domain form to create a theme copy.
 */
function iq_multidomain_extensions_domain_edit_form_submit(&$form, FormStateInterface $form_state) {
    $new_value = strtolower($form['name']['#value']);
    $new_name = preg_replace('/[^a-z0-9_]+/', '_', $new_value);
    $domain_name = str_replace("_", "-", $new_name);
    $old_name = 'iq_custom';
    $messenger = \Drupal::messenger();
    /** Rancher integration */
    $httpClient = \Drupal::httpClient();
    $url = "https://rancher.iqual.ch/v3/project";
    $rancher_settings = \Drupal::config('iq_multidomain_extensions.rancher_settings');
    $username = $rancher_settings->get('username');
    $password = $rancher_settings->get('password');;

    // Get all the project and ingress settings from Rancher API.
    $curl_project = curl_init($url);
    curl_setopt($curl_project, CURLOPT_USERPWD, $username . ':' . $password);
    curl_setopt($curl_project, CURLOPT_HTTPHEADER, array(
        'Content-Type: application/json',
        'Accept: application/json',
    ));

    curl_setopt($curl_project, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl_project, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);

    $project = curl_exec($curl_project);
    $http_code = curl_getinfo( $curl_project, CURLINFO_HTTP_CODE );
    if ($http_code == "200" || $http_code == "201") {
        $project_id = json_decode($project,true)['data'][0]['id'];
        $host =  $_SERVER['HTTP_HOST'];

        $curl_ingress = curl_init($url . '/' . $project_id . '/ingresses');
        curl_setopt($curl_ingress, CURLOPT_USERPWD, $username . ':' . $password);
        curl_setopt($curl_ingress, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json',
            'Accept: application/json',
        ));

        curl_setopt($curl_ingress, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl_ingress, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
        $ingresses = curl_exec($curl_ingress);
        $ingresses = json_decode($ingresses, true)['data'];
        $namespace_id = "";
        $service_id = "";
        foreach ($ingresses as $ingress) {
            $public_endpoints = $ingress['publicEndpoints'];
            foreach ($public_endpoints as $public_endpoint) {
                if($public_endpoint['hostname'] == $host) {
                    $namespace_id = $ingress['namespaceId'];
                    $service_id = $public_endpoint['serviceId'];
                    break;
                }
            }
        }
        if (isset($namespace_id) && !empty($namespace_id)) {
            $data = [];
            $data['annotations'] = [
                "certmanager.k8s.io/cluster-issuer"=>"letsencrypt-prod",
                "nginx.ingress.kubernetes.io/proxy-body-size"=> "100M",
                "nginx.ingress.kubernetes.io/proxy-buffer-size"=> "16K"
            ];
            $data['defaultBackend'] = null;
            $data['name'] = $domain_name . '-docker-dev-iqual-ch-ingress';
            $data['namespaceId'] = $namespace_id;
            $data['projectId'] = $project_id;
            $data['rules'] = [
                [
                    "host" => $form['hostname']['#value'],
                    "paths"=> [
                        [
                            "serviceId"=> $service_id,
                            "targetPort"=> 80,
                            "type"=> "/v3/project/schemas/httpIngressPath"
                        ]
                    ],
                    "type"=> "/v3/project/schemas/ingressRule"
                ]
            ];
            $data['tls'] = [
                [
                    'certificateId' => $namespace_id . ":" . $domain_name ."-docker-dev-iqual-ch-autogen",
                    "hosts" => [
                        $form['hostname']['#value']
                    ],
                    "type" => "/v3/project/schemas/ingressTLS"
                ]
            ];
            $data = json_encode($data);
            $curl = curl_init();
            curl_setopt($curl, CURLOPT_USERPWD, $username . ':' . $password);
            curl_setopt($curl, CURLOPT_POST, true);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
            curl_setopt($curl, CURLOPT_URL, 'https://rancher.iqual.ch/v3/project/' . $project_id . '/ingresses');
            curl_setopt($curl, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json',
                'Accept: application/json',
            ));

            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            $result = curl_exec($curl);
        }
        else {
            $messenger->addMessage('Invalid configuration for the Rancher API. Set Rancher Settings at /admin/config/system/iqual_domain/rancher', 'error');
        }
    }
    else {
        $messenger->addMessage('Could not create a rancher domain. Set Rancher Settings at /admin/config/system/iqual_domain/rancher', 'error');
    }



    /** @var \Drupal\Core\Extension\ThemeHandler $themeHandler */
    $themeHandler = \Drupal::service('theme_handler');
    if (!is_dir('themes/custom/' . $new_name)) {
        recurse_copy('themes/custom/' . $old_name, 'themes/custom/' . $new_name, $old_name, $new_name);
        $themeInfo = $form['name']['#value'];
        $config = \Drupal::service('config.factory')->getEditable('domain_site_settings.domainconfigsettings');
        $config->set($form['id']['#value'] . '.site_name', $themeInfo);
        $mail = \Drupal::configFactory()->get('system.site')->get('mail');
        if (!isset($mail) || empty($mail)) {
            $mail = 'info@docker.iqual.ch';
        }
        $config->set($form['id']['#value'] . '.site_mail', $mail);
        $config->save();
        change_theme_info('themes/custom/' . $new_name . '/' . $new_name . '.info.yml', $themeInfo);
        try {
            $themeHandler->getTheme($new_name);
        } catch (UnknownExtensionException $exception) {
            /** @var \Drupal\Core\Extension\ThemeInstaller $themeInstaller */
            $themeInstaller = \Drupal::service('theme_installer');
            try {
                $themeInstaller->install([$new_name]);
            }
            catch (EntityStorageException $e) {
                $messenger->addMessage(t('Theme is already stored.'), 'warning');
            }
            catch (UnknownExtensionException $e) {
                $messenger->addMessage(t('There was a problem with installing the theme.'), 'error');
            }
        }
        $config = \Drupal::service('config.factory')->getEditable('domain_theme_switch.settings');
        $config->set($form['id']['#value'] . '_site', $new_name);
        $config->save();
        // Copy all the settings from the previous to the new theme.
        $data = \Drupal::configFactory()->get('iq_custom.settings')->getRawData();
        \Drupal::configFactory()->getEditable($new_name . '.settings')->setData($data)->save();

        // Send an email to notify about setting up the new domain.
        $mailManager = \Drupal::service('plugin.manager.mail');
        $user = \Drupal::currentUser();
        $module = 'iq_multidomain_extensions';
        $key = 'create_domain';
        $to = $user->getEmail();
        $params['message'] = 'A new domain has been created with a hostname ' . $form['hostname']['#value'] . ' for the ' . $form['name']['#value'] . ' site.';
        $params['domain_title'] = $form['name']['#value'];
        $send = true;

        if (isset($to) && !empty($to)) {
            $result = $mailManager->mail($module, $key, $to, 'en', $params, null, $send);
            if ($result['result'] !== true) {
                $messenger->addMessage(t('There was a problem sending your message and it was not sent.'), 'error');
            }
            else {
                $messenger->addMessage(t('An email has been sent for the newly created domain.'));
            }
        }
    }
}

/**
 * Implements hook_mail().
 */
function iq_multidomain_extensions_mail($key, &$message, $params) {
    $messenger = \Drupal::messenger();
    $options = [
        'langcode' => $message['langcode'],
    ];
    switch ($key) {
     case 'create_domain':
         $message['from'] =  \Drupal::config('system.site')->get('mail');
         $message['subject'] = t('Domain created: @title', array('@title' => $params['domain_title']), $options);
         $message['body'][] = $params['message'];
         break;
    }
}

/**
 * Function to copy a theme folder.
 *
 * @param $src
 *    The source of the theme.
 * @param $dst
 *    The destination of the theme copy.
 * @param $old_name
 *    Old name of the theme.
 * @param $new_name
 *    New name for the theme copy.
 */
function recurse_copy($src,$dst, $old_name, $new_name) {
    $dir = opendir($src);
    @mkdir($dst);
    while(false !== ($file = readdir($dir)) ) {
        if (($file != '.' ) && ( $file != '..' )) {
            if (is_dir($src . '/' . $file)) {
                recurse_copy($src . '/' . $file,$dst . '/' . $file, $old_name, $new_name);
            }
            else {
                $file_contents = file_get_contents($src . '/' . $file);
                $file_contents = str_replace($old_name,$new_name,$file_contents);
                if(strpos($file, $old_name) != -1) {
                    $file = str_replace($old_name, $new_name, $file);
                }
                @file_put_contents($dst . '/' . $file,$file_contents);
            }
        }
    }
    closedir($dir);
}

/**
 * Renames the theme name of the new theme copy for proper functionality.
 *
 * @param $file_name
 *    The file name in which the theme will be renamed.
 * @param $theme_name
 *    The new theme name.
 */
function change_theme_info($file_name, $theme_name) {
    $file_contents = file_get_contents($file_name);
    $file_contents = preg_replace('/name: [a-z0-9].*/', 'name: ' . $theme_name, $file_contents);
    $file_contents = preg_replace('/description: \'[a-z0-9].*\'/', 'description: ' . $theme_name . ' theme', $file_contents);
    @file_put_contents($file_name, $file_contents);

}